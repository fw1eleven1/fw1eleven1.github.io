{"version":3,"file":"component---src-pages-index-tsx-43e4c7203450fccf3977.js","mappings":"4NA6FA,IAAMA,GAAY,gHAqHlB,UA7GqD,YAEjD,IADUC,EACX,EADDC,SAAYD,OAENE,GAAuBC,EAAAA,EAAAA,gBAAe,cAgDtCC,EAAcF,EAAKG,kBAAkBC,MACrCC,EAAkBL,EAAKM,aAAaC,MAEtCC,EAA8B,CAChCC,IAAK,GAEPJ,EAAgBK,SAAQ,SAACH,GACvBA,EAAMH,MAAMM,SAAQ,SAACC,QAC6BC,IAA5CJ,EAAWG,EAAKE,KAAKC,mBACvBN,EAAWG,EAAKE,KAAKC,mBAAqB,EACvCN,EAAWG,EAAKE,KAAKC,qBAC1BN,EAAU,YAId,IAAMO,EAA8BC,EAAAA,MAAkBlB,GAChDmB,EACkB,iBAAfF,EAAOG,KAAqBH,EAAOG,IAAcH,EAAOG,IAAf,MAE5CC,GAAUC,EAAAA,EAAAA,UACd,kBACElB,EAAYmB,QACV,SACEC,EADF,GAeE,OARG,EAJDT,KACEU,YAAeC,KAIdd,SAAQ,SAAAQ,QACON,IAAdU,EAAKJ,GAAoBI,EAAKJ,GAAO,EACpCI,EAAKJ,QAGZI,EAAI,MAEGA,IAET,CAAEb,IAAK,MAEX,IAGF,OACEgB,EAAAA,EAAAA,IAACC,EAAAA,EAAD,CACEC,aAAc3B,EAAK4B,KAAKD,aACxBE,MAAO7B,EAAK8B,KAAKC,gBAAgBC,kBAEjCP,EAAAA,EAAAA,IAAC5B,EAAD,MAEE4B,EAAAA,EAAAA,IAACQ,EAAAA,EAAD,CAAShB,YAAaA,EAAaO,KAAML,KACzCM,EAAAA,EAAAA,IAACS,EAAAA,EAAD,CAAUjB,YAAaA,EAAakB,MAAOjC","sources":["webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["import React, { FunctionComponent, useMemo } from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport queryString, { ParsedQuery } from 'query-string'\n\nimport Main from 'components/Common/Main'\nimport PostList from 'components/Post/PostList'\nimport TagList from 'components/Tag/TagList'\nimport styled from '@emotion/styled'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\n\ntype IndexPageProps = {\n  location: {\n    search: string\n  }\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        siteUrl: string\n      }\n    }\n    allMarkdownRemark: {\n      edges: PostListItemProps[]\n    }\n    allDirectory: {\n      group: {\n        edges: {\n          node: {\n            relativeDirectory: string\n          }\n        }\n      }\n    }\n    file: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n    }\n  }\n}\n\ntype CategoryEdgesProps = {\n  edges: CategoryNodeProps[]\n}\n\ntype CategoryNodeProps = {\n  node: {\n    relativeDirectory: string\n  }\n}\n\ntype CategoriesProps = {\n  [key: string]: number\n}\n\ntype PostListItemProps = {\n  node: {\n    fields: { slug: string }\n    frontmatter: {\n      title: string\n      date: string\n      summary: string\n      tags: string[]\n    }\n  }\n}\n\ntype QueryDataProps = {\n  site: {\n    siteMetadata: {\n      title: string\n      description: string\n      siteUrl: string\n    }\n  }\n  allMarkdownRemark: {\n    edges: PostListItemProps[]\n  }\n  allDirectory: {\n    group: CategoryEdgesProps[]\n  }\n  file: {\n    childImageSharp: {\n      gatsbyImageData: IGatsbyImageData\n    }\n  }\n}\n\ntype CategoryListProps = {\n  [key: string]: number\n}\n\nconst ChildWrapper = styled.div`\n  width: 800px;\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`\n\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\n  location: { search },\n}) {\n  const data: QueryDataProps = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          siteUrl\n        }\n      }\n      allMarkdownRemark(\n        sort: { order: DESC, fields: [frontmatter___date] }\n        filter: { fileAbsolutePath: { regex: \"/(contents)/\" } }\n      ) {\n        edges {\n          node {\n            id\n            fields {\n              slug\n            }\n            frontmatter {\n              title\n              date\n              summary\n              tags\n            }\n          }\n        }\n      }\n      allDirectory(\n        filter: { relativePath: { ne: \"\" }, relativeDirectory: { ne: \"\" } }\n      ) {\n        group(field: relativeDirectory) {\n          edges {\n            node {\n              name\n              relativeDirectory\n            }\n          }\n        }\n      }\n      file(name: { eq: \"ogimage\" }) {\n        childImageSharp {\n          gatsbyImageData\n        }\n      }\n    }\n  `)\n\n  const remarkEdges = data.allMarkdownRemark.edges\n  const directoryGroups = data.allDirectory.group\n\n  let categories: CategoriesProps = {\n    All: 0,\n  }\n  directoryGroups.forEach((group: CategoryEdgesProps) => {\n    group.edges.forEach((edge: CategoryNodeProps) => {\n      if (categories[edge.node.relativeDirectory] === undefined)\n        categories[edge.node.relativeDirectory] = 1\n      else categories[edge.node.relativeDirectory]++\n      categories['All']++\n    })\n  })\n\n  const parsed: ParsedQuery<string> = queryString.parse(search)\n  const selectedTag: string =\n    typeof parsed.tag !== 'string' || !parsed.tag ? 'All' : parsed.tag\n\n  const tagList = useMemo(\n    () =>\n      remarkEdges.reduce(\n        (\n          list: CategoryListProps,\n          {\n            node: {\n              frontmatter: { tags },\n            },\n          }: PostListItemProps,\n        ) => {\n          tags.forEach(tag => {\n            if (list[tag] === undefined) list[tag] = 1\n            else list[tag]++\n          })\n\n          list['All']++\n\n          return list\n        },\n        { All: 0 },\n      ),\n    [],\n  )\n\n  return (\n    <Main\n      siteMetadata={data.site.siteMetadata}\n      image={data.file.childImageSharp.gatsbyImageData}\n    >\n      <ChildWrapper>\n        {/* <Description description=\"전체 글 보기\" /> */}\n        <TagList selectedTag={selectedTag} tags={tagList} />\n        <PostList selectedTag={selectedTag} posts={remarkEdges} />\n      </ChildWrapper>\n    </Main>\n  )\n}\n\nexport default IndexPage\n"],"names":["ChildWrapper","search","location","data","useStaticQuery","remarkEdges","allMarkdownRemark","edges","directoryGroups","allDirectory","group","categories","All","forEach","edge","undefined","node","relativeDirectory","parsed","queryString","selectedTag","tag","tagList","useMemo","reduce","list","frontmatter","tags","___EmotionJSX","Main","siteMetadata","site","image","file","childImageSharp","gatsbyImageData","TagList","PostList","posts"],"sourceRoot":""}