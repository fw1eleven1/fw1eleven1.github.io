{"version":3,"file":"component---src-templates-post-list-template-tsx-41c1b32d5e855ac6690b.js","mappings":"6NAOA,IAAMA,GAAkB,4FAWxB,EANyD,YAErD,IADFC,EACC,EADDA,YAEA,OAAOC,EAAAA,EAAAA,IAACF,EAAD,KAAqBC,I,2BCsC9B,IAAME,GAAY,iHA8DlB,EAtD+D,YAW3D,IAAD,IAVDC,SAAYC,EAUX,EAVWA,SAAUC,EAUrB,EAVqBA,OAUrB,IATDC,KACUC,EAQT,EARCC,KAAQD,aACaE,EAOtB,EAPCC,kBAAqBD,MAQjBE,EADL,EANCC,KACEC,oBACEC,YAAed,YAKII,EAASW,UAAU,IAEtCC,EAA8BC,EAAAA,MAAkBC,UAAUb,IAC1Dc,EACkB,iBAAfH,EAAOI,KAAqBJ,EAAOI,IAAcJ,EAAOI,IAAf,MAE5CC,GAAUC,EAAAA,EAAAA,UACd,kBACEb,EAAMc,QACJ,SACEC,EADF,GAeE,OARG,EAJDC,KACEX,YAAeY,KAIdC,SAAQ,SAAAP,QACOQ,IAAdJ,EAAKJ,GAAoBI,EAAKJ,GAAO,EACpCI,EAAKJ,QAGZI,EAAI,MAEGA,IAET,CAAEK,IAAK,MAEX,IAGF,OACE5B,EAAAA,EAAAA,IAAC6B,EAAAA,EAAD,CAAMvB,aAAcA,IAClBN,EAAAA,EAAAA,IAACC,EAAD,MACED,EAAAA,EAAAA,IAAC8B,EAAD,CAAa/B,YAAaW,KAC1BV,EAAAA,EAAAA,IAAC+B,EAAAA,EAAD,CAASb,YAAaA,EAAaO,KAAML,KACzCpB,EAAAA,EAAAA,IAACgC,EAAAA,EAAD,CAAUd,YAAaA,EAAae,MAAOzB","sources":["webpack://gatsby-starter-default/./src/components/Common/Description.tsx","webpack://gatsby-starter-default/./src/templates/postList_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ntype DescriptionProps = {\n  description: string\n}\n\nconst DescriptionWrapper = styled.div`\n  margin-bottom: 15px;\n  opacity: 0.8;\n`\n\nconst Description: FunctionComponent<DescriptionProps> = function ({\n  description,\n}) {\n  return <DescriptionWrapper>{description}</DescriptionWrapper>\n}\n\nexport default Description\n","import React, { FunctionComponent, useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport styled from '@emotion/styled'\nimport Main from 'components/Common/Main'\nimport Description from 'components/Common/Description'\nimport queryString, { ParsedQuery } from 'query-string'\nimport TagList from 'components/Tag/TagList'\nimport PostList from 'components/Post/PostList'\n\ntype PostTemplateProps = {\n  location: {\n    pathname: string\n    search: string\n  }\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        siteUrl: string\n      }\n    }\n    allMarkdownRemark: {\n      edges: PostListItemProps[]\n    }\n    file: {\n      childMarkdownRemark: {\n        frontmatter: {\n          description: {\n            [key: string]: string\n          }\n        }\n      }\n    }\n  }\n}\n\ntype PostListItemProps = {\n  node: {\n    fields: { slug: string }\n    frontmatter: {\n      title: string\n      date: string\n      summary: string\n      tags: string[]\n    }\n  }\n}\n\ntype CategoryListProps = {\n  [key: string]: number\n}\n\nconst ChildWrapper = styled.div`\n  width: 800px;\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`\n\nconst PostListTemplate: FunctionComponent<PostTemplateProps> = function ({\n  location: { pathname, search },\n  data: {\n    site: { siteMetadata },\n    allMarkdownRemark: { edges },\n    file: {\n      childMarkdownRemark: {\n        frontmatter: { description },\n      },\n    },\n  },\n}) {\n  const desc = description[pathname.substring(1)]\n\n  const parsed: ParsedQuery<string> = queryString.parse(decodeURI(search))\n  const selectedTag: string =\n    typeof parsed.tag !== 'string' || !parsed.tag ? 'All' : parsed.tag\n\n  const tagList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: CategoryListProps,\n          {\n            node: {\n              frontmatter: { tags },\n            },\n          }: PostListItemProps,\n        ) => {\n          tags.forEach(tag => {\n            if (list[tag] === undefined) list[tag] = 1\n            else list[tag]++\n          })\n\n          list['All']++\n\n          return list\n        },\n        { All: 0 },\n      ),\n    [],\n  )\n\n  return (\n    <Main siteMetadata={siteMetadata}>\n      <ChildWrapper>\n        <Description description={desc} />\n        <TagList selectedTag={selectedTag} tags={tagList} />\n        <PostList selectedTag={selectedTag} posts={edges} />\n      </ChildWrapper>\n    </Main>\n  )\n}\n\nexport default PostListTemplate\n\nexport const queryData = graphql`\n  query queryData($categoryRegex: String) {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: $categoryRegex } }) {\n      edges {\n        node {\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY-MM-DD\")\n            tags\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n    file(name: { eq: \"category_info\" }) {\n      childMarkdownRemark {\n        frontmatter {\n          description {\n            IT\n            JustChat\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["DescriptionWrapper","description","___EmotionJSX","ChildWrapper","location","pathname","search","data","siteMetadata","site","edges","allMarkdownRemark","desc","file","childMarkdownRemark","frontmatter","substring","parsed","queryString","decodeURI","selectedTag","tag","tagList","useMemo","reduce","list","node","tags","forEach","undefined","All","Main","Description","TagList","PostList","posts"],"sourceRoot":""}