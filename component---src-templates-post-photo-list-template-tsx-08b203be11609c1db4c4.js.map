{"version":3,"file":"component---src-templates-post-photo-list-template-tsx-08b203be11609c1db4c4.js","mappings":"6JAOA,IAAMA,GAAkB,4FAWxB,IANyD,YAErD,IADFC,EACC,EADDA,YAEA,OAAOC,EAAAA,EAAAA,IAACF,EAAD,KAAqBC,K,sKCC9B,IAAME,GAAa,4HAObC,GAAkB,OAAOC,EAAAA,GAAP,qBAAH,6DAKTF,EALS,kBAUfG,GAAoB,OAAOC,EAAAA,EAAP,qBAAHC,CAAAA,KAAAA,SAAAA,OAAAA,wFAUjBC,GAAY,wFAKZC,GAAY,sGAMZC,GAAW,uIAkCjB,EA1B6D,YAMzD,IALFC,EAKC,EALDA,MACAC,EAIC,EAJDA,KACAC,EAGC,EAHDA,KACAC,EAEC,EAFDA,UACAC,EACC,EADDA,KAEA,OACEd,EAAAA,EAAAA,IAACE,EAAD,CAAiBa,GAAID,GAClBD,IACCb,EAAAA,EAAAA,IAACI,EAAD,CACEY,IAAI,YACJC,MAAOJ,EAAUK,gBAAgBC,mBAGrCnB,EAAAA,EAAAA,IAACC,EAAD,KAAgBS,IAChBV,EAAAA,EAAAA,IAACQ,EAAD,KACGI,EAAKQ,KAAI,SAAAC,GAAG,OACXrB,EAAAA,EAAAA,IAACS,EAAD,CAAaa,IAAKD,GAAlB,IAAyBA,QAG7BrB,EAAAA,EAAAA,IAACO,EAAD,KAAeI,K,UCxDrB,IAAMY,GAAe,6MAqCrB,EAzBoD,YAGhD,IAFFC,EAEC,EAFDA,YACAC,EACC,EADDA,MAEA,GAAmCC,EAAAA,EAAAA,GAAkBF,EAAaC,GAA1DE,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,SAEtB,OACE5B,EAAAA,EAAAA,IAACuB,EAAD,CAAiBM,IAAKF,GACnBC,EAASR,KACR,WAOEU,GAPF,QAEIC,KACYC,EAHhB,EAGMC,OAAUD,KACVE,EAJN,EAIMA,YAJN,OASElC,EAAAA,EAAAA,IAACmC,GAAD,QAAeb,IAAKQ,GAAOI,EAA3B,CAAwCpB,KAAMkB,UCDxD,IAAMI,GAAY,iHAuElB,EA/D+D,YAW3D,IAAD,IAVDC,SAAYC,EAUX,EAVWA,SAAUC,EAUrB,EAVqBA,OAUrB,IATDC,KACUC,EAQT,EARCC,KAAQD,aACaE,EAOtB,EAPCC,kBAAqBD,MAGF5C,EAIpB,EANC8C,KACEC,oBACEZ,YAAenC,YAKjBgD,EAAOC,UAAUV,GAAUW,UAAU,IACd,IAAvBF,EAAKG,QAAQ,OACfH,EAAOA,EAAKE,UAAU,EAAGF,EAAKG,QAAQ,OAGxC,IAAMC,EAAsBpD,EAAYqD,QACtC,SAAAC,GAAI,OAAIA,EAAKC,MAAM,KAAK,KAAOP,KAG3BM,EAAOF,EAAoB,GAAGG,MAAM,KAAK,GAEzCC,EAA8BC,EAAAA,MAAkBR,UAAUT,IAC1Df,EACkB,iBAAf+B,EAAOlC,KAAqBkC,EAAOlC,IAAckC,EAAOlC,IAAf,MAE5CoC,GAAUC,EAAAA,EAAAA,UACd,kBACEf,EAAMgB,QACJ,SACEC,EADF,GAeE,OARG,EAJD7B,KACEG,YAAetB,KAIdiD,SAAQ,SAAAxC,QACOyC,IAAdF,EAAKvC,GAAoBuC,EAAKvC,GAAO,EACpCuC,EAAKvC,QAGZuC,EAAI,MAEGA,IAET,CAAEG,IAAK,MAEX,IAGF,OACE/D,EAAAA,EAAAA,IAACgE,EAAAA,EAAD,CAAMvB,aAAcA,IAClBzC,EAAAA,EAAAA,IAACoC,EAAD,MACEpC,EAAAA,EAAAA,IAACiE,EAAAA,EAAD,CAAalE,YAAasD,KAC1BrD,EAAAA,EAAAA,IAACkE,EAAAA,EAAD,CAAS1C,YAAaA,EAAaZ,KAAM6C,KACzCzD,EAAAA,EAAAA,IAACmE,EAAD,CAAe3C,YAAaA,EAAaC,MAAOkB","sources":["webpack://gatsby-starter-default/./src/components/Common/Description.tsx","webpack://gatsby-starter-default/./src/components/Post/PostPhotoItem.tsx","webpack://gatsby-starter-default/./src/components/Post/PostPhotoList.tsx","webpack://gatsby-starter-default/./src/templates/postPhotoList_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ntype DescriptionProps = {\n  description: string\n}\n\nconst DescriptionWrapper = styled.div`\n  margin-bottom: 15px;\n  opacity: 0.8;\n`\n\nconst Description: FunctionComponent<DescriptionProps> = function ({\n  description,\n}) {\n  return <DescriptionWrapper>{description}</DescriptionWrapper>\n}\n\nexport default Description\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\n\ntype PostPhotoItemProps = {\n  title: string\n  date: string\n  tags: string[]\n  thumbnail?: {\n    childImageSharp: {\n      gatsbyImageData: IGatsbyImageData\n    }\n  }\n  link: string\n}\nconst PostItemTitle = styled.div`\n  font-size: 24px;\n  font-weight: 600;\n  color: #000;\n  word-break: break-all;\n`\n\nconst PostItemWrapper = styled(Link)`\n  cursor: pointer;\n  color: inherit;\n  text-decoration: none;\n\n  &:hover ${PostItemTitle} {\n    opacity: 0.7;\n  }\n`\n\nconst PostItemThumbnail = styled(GatsbyImage)`\n  width: 100%;\n  height: 300px;\n  margin-bottom: 10px;\n\n  @media (max-width: 767px) {\n    height: 150px;\n  }\n`\n\nconst PostItemDate = styled.div`\n  font-size: 14px;\n  opacity: 0.6;\n`\n\nconst PostItemTags = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 -5px;\n`\n\nconst PostItemTag = styled.div`\n  height: 25px;\n  line-height: 1.7;\n  border-radius: 20px;\n  color: #6610f2;\n  margin: 0 5px;\n`\n\nconst PostPhotoItem: FunctionComponent<PostPhotoItemProps> = function ({\n  title,\n  date,\n  tags,\n  thumbnail,\n  link,\n}) {\n  return (\n    <PostItemWrapper to={link}>\n      {thumbnail && (\n        <PostItemThumbnail\n          alt=\"thumbnail\"\n          image={thumbnail.childImageSharp.gatsbyImageData}\n        />\n      )}\n      <PostItemTitle>{title}</PostItemTitle>\n      <PostItemTags>\n        {tags.map(tag => (\n          <PostItemTag key={tag}>#{tag}</PostItemTag>\n        ))}\n      </PostItemTags>\n      <PostItemDate>{date}</PostItemDate>\n    </PostItemWrapper>\n  )\n}\n\nexport default PostPhotoItem\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport PostPhotoItem from './PostPhotoItem'\nimport useInfiniteScroll from 'hooks/useInfiniteScroll'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\n\ntype PostProps = {\n  selectedTag: string\n  posts: PostPhotoItemProps[]\n}\n\ntype PostPhotoItemProps = {\n  node: {\n    fields: { slug: string }\n    frontmatter: {\n      title: string\n      date: string\n      tags: string[]\n      thumbnail?: {\n        childImageSharp: {\n          gatsbyImageData: IGatsbyImageData\n        }\n      }\n    }\n  }\n}\n\nconst PostListWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 20px;\n  padding: 15px 0 50px;\n\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    grid-gap: 10px;\n  }\n`\n\nconst PostPhotoList: FunctionComponent<PostProps> = function ({\n  selectedTag,\n  posts,\n}) {\n  const { containerRef, postList } = useInfiniteScroll(selectedTag, posts)\n\n  return (\n    <PostListWrapper ref={containerRef}>\n      {postList.map(\n        (\n          {\n            node: {\n              fields: { slug },\n              frontmatter,\n            },\n          }: PostPhotoItemProps,\n          i: number,\n        ) => (\n          <PostPhotoItem key={i} {...frontmatter} link={slug} />\n        ),\n      )}\n    </PostListWrapper>\n  )\n}\n\nexport default PostPhotoList\n","import React, { FunctionComponent, useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport styled from '@emotion/styled'\nimport Main from 'components/Common/Main'\nimport Description from 'components/Common/Description'\nimport queryString, { ParsedQuery } from 'query-string'\nimport TagList from 'components/Tag/TagList'\nimport PostPhotoList from 'components/Post/PostPhotoList'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\n\ntype PostTemplateProps = {\n  location: {\n    pathname: string\n    search: string\n  }\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        siteUrl: string\n      }\n    }\n    allMarkdownRemark: {\n      edges: PostListItemProps[]\n    }\n    file: {\n      childMarkdownRemark: {\n        frontmatter: {\n          description: string[]\n        }\n      }\n    }\n  }\n}\n\ntype PostListItemProps = {\n  node: {\n    fields: { slug: string }\n    frontmatter: {\n      title: string\n      date: string\n      tags: string[]\n      thumbnail: {\n        childImageSharp: {\n          gatsbyImageData: IGatsbyImageData\n        }\n      }\n    }\n  }\n}\n\ntype CategoryListProps = {\n  [key: string]: number\n}\n\nconst ChildWrapper = styled.div`\n  width: 800px;\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`\n\nconst PostListTemplate: FunctionComponent<PostTemplateProps> = function ({\n  location: { pathname, search },\n  data: {\n    site: { siteMetadata },\n    allMarkdownRemark: { edges },\n    file: {\n      childMarkdownRemark: {\n        frontmatter: { description },\n      },\n    },\n  },\n}) {\n  let path = decodeURI(pathname).substring(1)\n  if (path.indexOf('/') !== -1) {\n    path = path.substring(0, path.indexOf('/'))\n  }\n\n  const selectedDescription = description.filter(\n    desc => desc.split(':')[0] === path,\n  )\n\n  const desc = selectedDescription[0].split(':')[1]\n\n  const parsed: ParsedQuery<string> = queryString.parse(decodeURI(search))\n  const selectedTag: string =\n    typeof parsed.tag !== 'string' || !parsed.tag ? 'All' : parsed.tag\n\n  const tagList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: CategoryListProps,\n          {\n            node: {\n              frontmatter: { tags },\n            },\n          }: PostListItemProps,\n        ) => {\n          tags.forEach(tag => {\n            if (list[tag] === undefined) list[tag] = 1\n            else list[tag]++\n          })\n\n          list['All']++\n\n          return list\n        },\n        { All: 0 },\n      ),\n    [],\n  )\n\n  return (\n    <Main siteMetadata={siteMetadata}>\n      <ChildWrapper>\n        <Description description={desc} />\n        <TagList selectedTag={selectedTag} tags={tagList} />\n        <PostPhotoList selectedTag={selectedTag} posts={edges} />\n      </ChildWrapper>\n    </Main>\n  )\n}\n\nexport default PostListTemplate\n\nexport const queryPostPhotoData = graphql`\n  query queryPostPhotoData($categoryRegex: String) {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { fileAbsolutePath: { regex: $categoryRegex } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date(formatString: \"YYYY-MM-DD\")\n            tags\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n            }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n    file(name: { eq: \"category_info\" }) {\n      childMarkdownRemark {\n        frontmatter {\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["DescriptionWrapper","description","___EmotionJSX","PostItemTitle","PostItemWrapper","Link","PostItemThumbnail","GatsbyImage","process","PostItemDate","PostItemTags","PostItemTag","title","date","tags","thumbnail","link","to","alt","image","childImageSharp","gatsbyImageData","map","tag","key","PostListWrapper","selectedTag","posts","useInfiniteScroll","containerRef","postList","ref","i","node","slug","fields","frontmatter","PostPhotoItem","ChildWrapper","location","pathname","search","data","siteMetadata","site","edges","allMarkdownRemark","file","childMarkdownRemark","path","decodeURI","substring","indexOf","selectedDescription","filter","desc","split","parsed","queryString","tagList","useMemo","reduce","list","forEach","undefined","All","Main","Description","TagList","PostPhotoList"],"sourceRoot":""}