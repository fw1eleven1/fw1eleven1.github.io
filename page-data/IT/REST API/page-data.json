{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/IT/REST API/",
    "result": {"data":{"site":{"siteMetadata":{"title":"js의 잡다한 블로그"}},"allMarkdownRemark":{"edges":[{"node":{"html":"<h1>REST API</h1>\n<p>🤔 백엔드에서 API만들어서 프론트 혹은 앱이랑 통신해서 데이터 주고받으시면 됩니다~ 라고 하는데 무슨 말이래?</p>\n<h2>API?</h2>\n<blockquote>\n<p><strong>A</strong>pplication <strong>P</strong>rogramming <strong>I</strong>nterface로 데이터와 기능의 집합을 제공하여 컴퓨터 프로그램간 상호작용을 촉진하며, 서로 정보를 교환가능 하도록 하는 것이다.</p>\n</blockquote>\n<ul>\n<li>상호 간 정보, 즉 <strong>데이터</strong>를 주고 받는다는 것을 의미</li>\n</ul>\n<h2>그럼 REST API는?</h2>\n<blockquote>\n<p><strong>R</strong>epresentational <strong>S</strong>tate <strong>T</strong>ransfer로 소프트웨어 프로그램 개발 아키텍처의 한 형식이다. 자원(resource)의 표현(representation)에 의한 상태 전달을 의미한다.</p>\n</blockquote>\n<ul>\n<li>자원 - URI</li>\n<li>행위 - HTTP Method</li>\n<li>표현 - JSON, XML 등</li>\n<li>API를 구축할 때 URI와 HTTP Method를 활용하여 아키텍쳐를 구성하면 REST API구나~ 라는 뜻</li>\n<li>좀 더 원칙에 맞게, REST하게 구성하면 RESTful API가 되는 것</li>\n</ul>\n<hr>\n<p>💡 그렇다면 API를 만들어서 백이랑 프론트랑 통신하세요 라는 뜻의 결론은?</p>\n<ul>\n<li>백에서 REST API를 만들어서 URL과 어떤 데이터를 주고 받는지 알려주면</li>\n<li>프론트 혹은 앱에서 데이터와 함께 해당 URL로 때려서 그 결과를 JSON으로 리턴받아서 화면에 표시해준다 라는 것</li>\n<li>1번 사람의 프로필 정보좀 주세요~ 하고 <a href=\"https://api.abc.com/users/1\" target=\"_blank\" rel=\"nofollow\">https://api.abc.com/users/1</a> 로 URL을 날리면 그 사람의 프로필 정보가 JSON으로 다시 돌아온다. 그럼 그 데이터를 적당히 보여주면 되는 것</li>\n</ul>\n<h2>REST API 명명 규칙</h2>\n<ol>\n<li><strong>소문자 사용</strong></li>\n</ol>\n<ul>\n<li>URI는 대/소문자를 구분하므로 소문자로만 사용해서 헷갈리지 않도록</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">🙂 GOOD - http://api.example.com/testapi\n😡 BAD  - http://api.example.com/testApi</code></pre></div>\n<ol start=\"2\">\n<li><strong>언더바(_) 대신 하이픈(-) 사용</strong></li>\n</ol>\n<ul>\n<li>언더바는 글자 폰트나 디자인에 따라 가려질 수 있으므로 사용하지 말 것</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">🙂 GOOD - http://api.example.com/test-api\n😡 BAD  - http://api.example.com/test_api</code></pre></div>\n<ol start=\"3\">\n<li><strong>URI의 마지막에 슬래시(/)를 사용하지 않기</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">🙂 GOOD - http://api.example.com/testapi\n😡 BAD  - http://api.example.com/testapi/</code></pre></div>\n<ol start=\"4\">\n<li><strong>행위를 포함하지 않기</strong></li>\n</ol>\n<ul>\n<li>행위는 URI 안에 넣지말고 Method로 구분하여 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">🙂 GOOD - GET http://api.example.com/users\n😡 BAD  - GET http://api.example.com/get-users</code></pre></div>\n<ol start=\"5\">\n<li><strong>파일 확장자 포함하지 않기</strong></li>\n</ol>\n<ul>\n<li>헤더에 별도로 표기하여야 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">🙂 GOOD - http://api.example.com/users/1/photo\n😡 BAD  - http://api.example.com/users/1/photo.png</code></pre></div>\n<ol start=\"6\">\n<li><strong>슬래시(/)로 계층 관계 나타내기</strong></li>\n</ol>\n<ul>\n<li>슬래시로 구분하여 하위 계층을 표현한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">🙂 GOOD - http://api.example.com/shapes/squares\n😡 BAD  - http://api.example.com/shapes-sqaures</code></pre></div>\n<ol start=\"7\">\n<li><strong>단수/복수 명사는 리소스에 따라 구분하여 사용</strong></li>\n</ol>\n<ul>\n<li><strong>도큐먼트</strong>(객체 인스턴스나 데이터베이스 레코드의 개념) - <strong>단수</strong></li>\n<li><strong>컬렉션</strong>(서버에서 관리하는 디렉터리 리소스) - <strong>복수</strong></li>\n<li><strong>스토어</strong>(클라이언트에서 관리하는 리소스 저장소) - <strong>복수</strong></li>\n<li>라고 하는데 잘 몰?루겠다.</li>\n<li>개인적으로 이해하기 쉽게 단일 개체를 INSERT/UPDATE할 땐 단수, 개체를 불러올 땐 복수형으로 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">GET http://api.example.com/users\nGET http://api.example.com/users/15\n\nPOST http://api.example.com/user\nPUT  http://api.example.com/user/1</code></pre></div>","id":"791bf1f5-afab-5dbe-9735-9ed4aba7f067","frontmatter":{"title":"REST API","summary":"REST API와 REST API의 URI 명명 규칙에 대해 알아보자","date":"2022-04-29","tags":["API"]}}}]}},"pageContext":{"slug":"/IT/REST API/"}},
    "staticQueryHashes": ["3495371188"]}