{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/IT/WSL2 + Ubuntu 환경에 Laravel 설치하기/",
    "result": {"data":{"site":{"siteMetadata":{"title":"js의 잡다한 블로그"}},"allMarkdownRemark":{"edges":[{"node":{"html":"<h3>WSL2 (Ubuntu 18.04), PHP7.4, Nginx 기준으로 작성</h3>\n<h2>Laravel 설치</h2>\n<ol>\n<li>유틸리티 프로그램 설치</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">zip</span> jq xsel libnss3-tools</code></pre></div>\n<ol start=\"2\">\n<li>Composer 설치</li>\n</ol>\n<ul>\n<li>Composer 란? PHP에서 사용하는 의존성 관리도구로 NPM 같은 패키지 관리 도구랑 비슷한 역할을 한다.</li>\n<li>apt로 composer 설치 시 1 버전이 설치된다. 아래의 명령어를 입력하여 2 버전을 설치하도록 하자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># installer를 다운 받을 폴더로 이동</span>\n<span class=\"token builtin class-name\">cd</span> /\n<span class=\"token function\">curl</span> -sS https://getcomposer.org/installer <span class=\"token operator\">|</span> php\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> composer.phar /usr/local/bin/composer</code></pre></div>\n<ul>\n<li>installer를 다운 받을 위치나 폴더는 적당히 지정하도록 하자.</li>\n</ul>\n<ol start=\"3\">\n<li>Laravel Installer 설치</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">composer</span> global require laravel/installer</code></pre></div>\n<ol start=\"4\">\n<li>Laravel 프로젝트 생성</li>\n</ol>\n<ul>\n<li>여기선 new-laravel 이란 프로젝트명으로 사용하여 생성</li>\n<li>new-laravel 부분에 자신의 프로젝트명으로 바꿔서 입력하면 됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">laravel new new-laravel</code></pre></div>\n<p>***   laravel commad not found 에러 시 PATH 설정</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> ~/.bashrc\n\n<span class=\"token comment\"># 맨 아래줄에 추가</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$PATH</span>:<span class=\"token environment constant\">$HOME</span>/.config/composer/vendor/bin\"</span>\n\n<span class=\"token builtin class-name\">source</span> ~/.bashrc</code></pre></div>\n<ul>\n<li>composer가 설치된 경로를 추가해주면 되는데 대부분 경로는 /.config/composer/vendor/bin 나 /.composer/vendor/bin에 있을 거임</li>\n</ul>\n<ol start=\"5\">\n<li>실행 테스트</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> new-laravel\nphp artisan serve</code></pre></div>\n<ul>\n<li><a href=\"http://localhost:8000\" target=\"_blank\" rel=\"nofollow\">http://localhost:8000</a> 에서 확인</li>\n</ul>\n<br>\n***   localhost 접속 했을 때 Permission denied 에러 시 해결 방법\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> <span class=\"token number\">777</span> -R <span class=\"token punctuation\">[</span>프로젝트 경로<span class=\"token punctuation\">]</span>/bootstrap\n<span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> <span class=\"token number\">777</span> -R <span class=\"token punctuation\">[</span>프로젝트 경로<span class=\"token punctuation\">]</span>/storage</code></pre></div>\n<h2>Nginx와 연동하기</h2>\n<ol>\n<li>Laravel + Nginx 연결</li>\n</ol>\n<ul>\n<li>nginx 의 기본 config 파일을 수정해서 사용해도 되지만 여러 프로젝트를 관리하기 쉽게 프로젝트별로 config 파일을 생성하여서 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#프로젝트명과 동일한 파일 생성</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/nginx/sites-available/new-laravel</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#아래의 내용 입력 후 저장</span>\nserver <span class=\"token punctuation\">{</span>\n\tlisten <span class=\"token number\">81</span><span class=\"token punctuation\">;</span>\n\tlisten <span class=\"token punctuation\">[</span>::<span class=\"token punctuation\">]</span>:81<span class=\"token punctuation\">;</span>\n\n\troot /var/www/new-laravel/public<span class=\"token punctuation\">;</span>\n\n\tindex index.php index.html index.htm index.nginx-debian.html<span class=\"token punctuation\">;</span>\n\n\tserver_name new_laravel<span class=\"token punctuation\">;</span>\n\n\tlocation / <span class=\"token punctuation\">{</span>\n        try_files <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/ /index.php?<span class=\"token variable\">$is_args</span><span class=\"token variable\">$args</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    location ~ <span class=\"token punctuation\">\\</span>.php$ <span class=\"token punctuation\">{</span>\n        try_files <span class=\"token variable\">$uri</span> /index.php <span class=\"token operator\">=</span><span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n        fastcgi_param SCRIPT_FILENAME <span class=\"token variable\">$realpath_root</span><span class=\"token variable\">$fastcgi_script_name</span><span class=\"token punctuation\">;</span>\n        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock<span class=\"token punctuation\">;</span>\n        fastcgi_index index.php<span class=\"token punctuation\">;</span>\n        include fastcgi_params<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\tlocation ~ /<span class=\"token punctuation\">\\</span>.ht <span class=\"token punctuation\">{</span>\n\t\tdeny all<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>마찬가지로 여기선 포트 번호를 81로 사용하지만 적당히 다른 번호를 입력하여 사용하면 된다.</li>\n<li>root 경로는 생성한 프로젝트의 경로를 입력해준다. 꼭 <strong>public</strong> 까지 붙여서 입력할 것</li>\n<li>설치된 PHP버전을 확인하여 fastcgi_pass 부분의 php버전을 적절히 입력하자.</li>\n</ul>\n<ol start=\"2\">\n<li>sites-enabled 에 심볼릭 링크 생성</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> -s /etc/nginx/sites-available/new-laravel /etc/nginx/sites-enabled/</code></pre></div>\n<ol start=\"3\">\n<li>Nginx 재시작</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> nginx -t\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> nginx restart</code></pre></div>\n<ol start=\"4\">\n<li>실행 테스트</li>\n</ol>\n<ul>\n<li><a href=\"http://localhost:81\" target=\"_blank\" rel=\"nofollow\">http://localhost:81</a> 에서 확인</li>\n</ul>\n<p><br><br></p>\n<h3>* Larevel 프로젝트 생성 시 특정 버전으로 생성하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">composer</span> create-project laravel/laravel<span class=\"token operator\">=</span><span class=\"token string\">\"[버전]\"</span> <span class=\"token punctuation\">[</span>프로젝트명<span class=\"token punctuation\">]</span></code></pre></div>\n<p>예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">composer</span> create-project laravel/laravel<span class=\"token operator\">=</span><span class=\"token string\">\"5.1.*\"</span> old-laravel</code></pre></div>","id":"750e2a0d-7afc-5647-a3c7-fa59a8724a75","frontmatter":{"title":"WSL2 + Ubuntu 환경에 Laravel 설치하기","summary":"WSL2에서 Laravel을 설치하고 프로젝트를 생성해보자 (Ubuntu, PHP 7.4 기준)","date":"2022-05-16","tags":["WSL","Linux","PHP","Laravel"]}}}]}},"pageContext":{"slug":"/IT/WSL2 + Ubuntu 환경에 Laravel 설치하기/"}},
    "staticQueryHashes": ["3495371188"]}